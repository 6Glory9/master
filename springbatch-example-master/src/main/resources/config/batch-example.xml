<bean:beans xmlns="http://www.springframework.org/schema/batch"
            xmlns:bean="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/batch
            http://www.springframework.org/schema/batch/spring-batch.xsd">


    <bean:bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <bean:property name="jobRepository" ref="jobRepository_example"/>
    </bean:bean>


    <!--
       1.restartable：是否能重新启动
       2.incrementer：创建paramter一种方式
    -->
    <job id="job_example" restartable="true" incrementer="customIncrementer" job-repository="jobRepository_example">
        <step id="step_example">
            <!--
               1.allow-start-if-complete: 完成是完可以重新开始
               2.start-limit：重新开始次数
               3.throttle-limit:这限制了排队等待并发的任务的数量处理以防止线程池被淹没。默认为4。
               4.task-executor:异步处理
            -->
            <tasklet transaction-manager="transactionManager_NOOP" allow-start-if-complete="true" start-limit="9">
                <!--
                     1.commit-interval:提交频率
                     2.skip-limit：跳过次数
                     3.skip-policy：跳过的策略,
                        skip-limit,skippable-exception-classes将没有效果，默认的LimitCheckingItemSkipPolicy
                        read抛出skippable-exception go on read
                        process抛出skippable-exception  rollback  get from read go on process
                        writer抛出skippable-exception   rollback  get from process go on writer
                        skip listener
                     4.retry-limit:重试次数
                     5.retry-policy:重试策略
                         retryable-exception classes element and retry-limit pair or provide a RetryPolicy bean instead.
                         default SimpleRetryPolicy
                         process抛出retryable-exception  rollback hash equeal
                         process抛出retryable-exception  rollback
                         retries listener
                     6.chunk-completion-policy：chunk完成策略
                     7.cache-capacity:重试最大容量
                     8.allow-start-if-complete决定完成启动此步，start-limit 次数 restartable
                -->
                <chunk reader="${read}" writer="${writer}" processor="${processor}" commit-interval="1">
                </chunk>

            </tasklet>
        </step>


        <!--
        1.JobExecutionListener
        2.ChunkListener
        3.ItemProcessListener
        4.ItemReadListener
        5.ItemWriteListener
        6.SkipListener
        7.StepExecutionListener
        8.RepeatListener
        9.RetryListener
        -->

    </job>


    <bean:bean id="customIncrementer" class="util.CustomIncrementer"/>


    <bean:bean id="customJobParametersValidator"
               class="org.springframework.batch.core.job.DefaultJobParametersValidator">
        <bean:property name="optionalKeys">
            <bean:set>
                <bean:value>first</bean:value>
            </bean:set>
        </bean:property>
    </bean:bean>


    <bean:bean id="transactionManager_NOOP"
               class="org.springframework.batch.support.transaction.ResourcelessTransactionManager"/>

    <!--
       1.table-prefix:表的前缀
       2.lob-handler:lob字段处理
       3.max-varchar-length:保留最长字段长度00
       4.isolation-level-for-create:create execution隔离级别，默认是序列
   -->
    <job-repository id="jobRepository_example" data-source="dataSource" transaction-manager="transactionManager_NOOP"
                    table-prefix="batch_" isolation-level-for-create="REPEATABLE_READ"/>


</bean:beans>